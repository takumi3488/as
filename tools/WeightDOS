#!/usr/bin/env python3
import os
import re
import sys

class ParseDta(object):
    def __init__(self):
        self.dtafile = 'pdosdr.dta'
        self.main()

    def main(self):
        self.filecheck()
        fline = 0
        for line in open(self.dtafile, 'r'):
            linebuf = line.strip()
            data = linebuf.split()
            fline += 1
            if fline == 1:
                self.nnee = int(data[0])
                self.ncmp = int(data[1])
                self.e0 = float(data[2])
                self.de = float(data[3])
            else:
                if 'EF' in line:
                    self.ef = float(data[-1])
        self.em = self.e0 + (self.nnee - 1) * self.de 
        self.nka = self.ncmp // 4

    def filecheck(self):
        if not os.path.isfile(self.dtafile):
            print('file:{} is not found.'.format(self.dtafile))
            exit()

class ParseConfig(object):
    def __init__(self, configfile):
        self.configfile = configfile
        self.filecheck()
        self.main()

    def filecheck(self):
        if not os.path.isfile(self.configfile):
            print('file:{} is not found.'.format(self.configfile))
            exit()

    def init_vals(self):
        self.ispin = 1
        self.emin = -3.0
        self.emax = 3.0
        self.atom_index = None
        self.l = None

    def main(self):
        self.init_vals()
        for line in open(self.configfile, 'r'):
            linebuf = line.strip()
            if '#' in linebuf:
                linebuf = linebuf.split('#')[0].strip()
            if re.search('^$', linebuf):
                continue

            if '=' in linebuf:
                data = linebuf.split('=')
                key = data[0].strip().lower()
                value = data[1].strip()
                if re.search('^$', value):
                    continue
                if key == 'atom_index':
                    self.atom_index = int(value)
                elif key == 'l':
                    self.l = value.lower()
                elif key == 'emax':
                    self.emax = float(value)
                elif key == 'emin':
                    self.emin = float(value)
                elif key == 'ispin':
                    self.ispin = int(value)

class CalcWeight(object):
    def __init__(self):
        self.result_file = 'pdosdr_result.data'
        self.filecheck()
        self.get_dta_info()
        self.get_config_info()
        self.main()

    def main(self):
        self.calc_sdos()

    def calc_sdos(self):
        if self.nka < self.atom_index:
            print('----------- Error -------------')
            print('num of kind of atoms = {}'.format(self.nka))
            print('but you set atom_index as {}'.format(self.atom_index))
            exit()
        sdos = 0.0
        wdos = 0.0
        fline = 0
        en0 = None
        en1 = None
        dos0 = None
        dos1 = None
        data_region = False
        for line in open(self.result_file, 'r'):
            linebuf = line.strip()
            data = linebuf.split()
            if '# SPIN' in linebuf:
                jspin = int(data[-1])
                if jspin == self.ispin:
                    data_region = True
                    continue

            if 'EF' in linebuf:
                break

            if data_region:
                fline += 1
                if fline == 1:
                    en0 = float(data[0]) 
                    dos0 = float(data[self.ncol])
                    continue
                else:
                    en1 = float(data[0])
                    dos1 = float(data[self.ncol])
                    en = 0.5 * (en1 + en0)
                    if( self.emin <= en <= self.emax):
                        ddos = self.de * 0.5 * ( dos0 + dos1 )
                        sdos += ddos
                        wdos += en * ddos
                    en0 = en1
                    dos0 = dos1
        self.sdos = sdos
        self.wdos = wdos
        print('integrated dos = {}'.format(self.sdos))
        print('center of mass = {}'.format((self.wdos / self.sdos) - self.ef))

    def filecheck(self):
        if not os.path.isfile(self.result_file):
            print('file:{} is not found.'.format(self.result_file))
            exit()

    def get_dta_info(self):
        dta_obj = ParseDta()
        self.nka = dta_obj.nka
        self.nnee = dta_obj.nnee
        self.ncmp = dta_obj.ncmp
        self.de = dta_obj.de
        self.e0 = dta_obj.e0
        self.em = dta_obj.em
        self.ef = dta_obj.ef

    def get_config_info(self):
        configfile = 'weightdos.in'
        lname = ['s', 'p', 'd', 'f']
        self.config_obj = ParseConfig(configfile)
        self.emin = self.config_obj.emin
        self.emax= self.config_obj.emax
        #
        #
        #
        self.emin += self.ef
        self.emax += self.ef
        self.atom_index = self.config_obj.atom_index
        self.ispin = self.config_obj.ispin

        if 'tot' in self.config_obj.l:
            self.ncol = 1
        else:
            l = lname.index(self.config_obj.l)
            self.ncol = (self.atom_index - 1)*8 + 2*(l + 1) + 1

if __name__ == '__main__':
    def gen_init():
        with open('weightdos.in', 'w') as fout:
            fout.write('#\n')
            fout.write('# configuration of Weight of DOS\n')
            fout.write('#\n')
            fout.write('atom_index = 1\n')
            fout.write('l = s\n')
            fout.write('#\n')
            fout.write('emin = -2.0\n')
            fout.write('emax =  2.0\n')
            
    argv = sys.argv
    if len(argv) > 1:
        if argv[1] == 'init':
            gen_init()
            print('generated configure file weightdos.in')
            print('edit it')
            exit()
    if not os.path.isfile('weightdos.in'):
        gen_init()
        print('generated configure file weightdos.in')
        print('edit it')
        exit()
    CalcWeight()

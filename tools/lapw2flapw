#!/usr/bin/env python3
import argparse
from KansaiPackage.KSfiles.GenFlapwInit import GenFlapwInit
from KansaiPackage.KSfiles.GetLastPrefix import GetLastPrefix
import os.path
import re
import shutil
import subprocess


class Lapw2Flapw(object):
    def __init__(self, args):
        self.filename = args.lapw_inputfile
        self.main()
        if not args.without_initfp:
            self.execute_fw1go()

    def main(self):
        self.generate_new_inputfile()
        self.filecopy()
        self.rewrite_conf()

    def generate_new_inputfile(self):
        if os.path.isfile(self.filename):
            self.filename_setup()
        else:
            if os.path.isdir(self.filename):
                self.dirname_setup()
            else:
                print("input file is not found.".format(self.filename))
                exit()

    def filecopy(self):
        wkdir = self.dirname + '/wk'
        mydir = './wk'
        if os.path.isdir(wkdir):
            if not os.path.exists(mydir):
                os.mkdir(mydir)
            for oldfile in ['fw1.out', 'fw1dst.dat', 'fw1eld.dat',
                            'fw1esd.dat', 'fw1fpot.dat', 'fw1fchg.dat']:
                if os.path.exists(oldfile):
                    os.remove(oldfile)
            for ffile in ['fort.1', 'fort.30', 'fort.35', 'minerva.conf']:
                oldfile = wkdir + '/' + ffile
                newfile = mydir + '/' + ffile
                if os.path.exists(newfile):
                    os.remove(newfile)
                if os.path.exists(oldfile):
                    shutil.copy2(oldfile, newfile)
        else:
            exit()

    def rewrite_conf(self):
        conffile = 'wk/minerva.conf'
        if os.path.exists(conffile):
            newfile = 'wk/minerva.conf.tmp'
            with open(newfile, 'w') as fout:
                for line in open(conffile, 'r'):
                    linebuf = line.strip()
                    if re.search('^calc\_type', linebuf):
                        fout.write('calc_type = flapw\n')
                    else:
                        fout.write(line)
            if os.path.isfile(newfile):
                shutil.copy2(newfile, conffile)
                os.remove(newfile)

    def ask_execute_fw1go(self):
        print('execute xfw1go(generate initial full potential)? y/n[n]')
        ans = input('>')
        if re.search('^(t|y)', ans.lower()):
            self.execute_fw1go()

    def execute_fw1go(self):
        fw1go = 'cd wk ; xfw1go'
        res = subprocess.call(fw1go, shell=True)
        if res > 0:
            print('----- Error(xfw1go) -----')
            print('error has been happen.')
            print('please check fw1.out')

    def filename_setup(self):
        GenFlapwInit(self.filename)
        linebuf = self.filename.split('/')
        linebuf.pop(-1)
        self.dirname = '/'.join(linebuf)
        return self

    def dirname_setup(self):
        self.dirname = self.filename
        self.status_log = self.dirname + '/wk/minerva_status.log'
        if os.path.isfile(self.status_log):
            self.parse_minerva_type()
        else:
            self.parse_traditional_type()
        if os.path.isfile(self.filename):
            GenFlapwInit(self.filename)
        else:
            print("file:{} is not found.".format(filename))
            exit()

    def parse_minerva_type(self):
        self.parse_status_log()

    def parse_traditional_type(self):
        basedir = self.dirname
        prefix_obj = GetLastPrefix(basedir)
        if prefix_obj.prefix is None:
            print("input file is not found.".format(filename))
            exit()
        else:
            datafile = prefix_obj.prefix.split('/')[-1] + '.dat'
            self.filename = self.dirname + '/' + datafile

    def parse_status_log(self):
        for line in open(self.status_log, 'r'):
            linebuf = line.strip()
            if re.search('^success', linebuf):
                data = linebuf.split()
                if len(data) > 2:
                    if re.search('^[1-9]', data[2]):
                        self.filename = self.dirname + '/sl' + data[2] + '.dat'


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog="lapw2flapw",
                                     usage="Generate fw1.dat from lapw inputfile",
                                     add_help=True)
    parser.add_argument('lapw_inputfile',
                        action='store',
                        nargs="?",
                        default='../lapw')
    parser.add_argument('--without-initfp', '-no-fp',
                        action='store_true',
                        help='do not create initial full potential')
    Lapw2Flapw(parser.parse_args())

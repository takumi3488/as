#!/Volumes/exHD/funa/local/bin/python3
#
# front end of ayband written in Fortran
#   written by Hiroki Funashima in kobe
#
import os
from KansaiPackage.KSfiles.ParseFort1 import ParseFort1
import re
import shutil
import subprocess
import sys


class ConfigAyband(object):
    def __init__(self, configfile):
        self.configfile = configfile
        self.init_vals()
        self.parse_main()
        self.get_scf_in_info()
        self.check_fort1()
        self.check_fort2()
        self.check_ef()
        self.check_nspin()
        self.get_nka()

    def init_vals(self):
        self.ayband = 'ayband'
        self.title = None
        self.logfile = 'ayband.out'
        self.axes = []
        self.spin_orbit = False
        self.figfile = 'band.ps'
        self.xsize = 120.0
        self.ysize = 180.0
        self.fermi_energy = None
        self.energy_min = None
        self.energy_max = None
        self.cologne_data_region = False
        self.ifile = 91
        self.info_level = 3
        self.fort1 = None
        self.fort2 = None
        self.ir = False
        self.iopt = True
        self.char_size = 12
        self.char_type = 1
        self.spin_type = None

    def get_nka(self):
        self.nka = ParseFort1(self.fort1).nka
        if self.title is None:
            self.title = ParseFort1(self.fort1).title

    def get_scf_in_info(self):
        try:
            infile = self.prefix + '.dat'
        except AttributeError:
            print('====== Error(ConfigAyband)======')
            print('prefix is not defined in your inputfile.')
            print('inputfile: {}'.format(self.configfile))
            exit()
        self.scf_in_obj = ParseSCFInput(infile)
        self.magtype = self.scf_in_obj.magtype
        self.kpoint_mesh = self.scf_in_obj.kpoint_mesh

    def show_info(self):
        print(' ** information to draw band structure ** ')
        print('    prefix = {}'.format(self.prefix))
        print('    number of kind of atoms = {}'.format(self.nka))
        print('    magnetic type: ', end='')
        if self.magtype == 'NONM':
            print('nonmagnetic without spin-orbit')
            soc = False
        elif self.magtype == 'MAGN':
            print('magnetic without spin-orbit')
            soc = False
        elif self.magtype == 'SPIN':
            print('nonmagnetic with spin-orbit')
            soc = True
        print('    Fermi Energy = {}(Ry.)'.format(self.fermi_energy))
        print()
        print('    crystal structure: {}'.format(self.fort1))
        print('    result of scf calculation: {}'.format(self.fort2))
        print()
        if soc:
            print('    to draw, including spin orbit interaction: ', end='')
            if self.spin_orbit:
                print('yes')
            else:
                print('no')
        print()
        print('    display index of irreducible representation: ', end='')
        if self.ir:
            print('yes')
            print('      character type = {}'.format(self.char_type))
            print('      character size = {}'.format(self.char_size))
        else:
            print('no')
        print()
        print('    Energy: {0} -> {1}'
              .format(self.energy_min, self.energy_max))
        print('    num of axis = {}'.format(len(self.axes)))
        for axis in self.axes:
            kx, ky, kz, ic = axis[0]
            print('     ({0}, {1}, {2}) / {3} -> '
                  .format(kx, ky, kz, ic), end='')
            kx, ky, kz, ic = axis[1]
            print('({0}, {1}, {2}) / {3}'.format(kx, ky, kz, ic))
        print()
        print('  -- information for figure:')

        print('    paper size: {0} x {1}'.format(self.ysize, self.xsize))
        print('    figure file: {}'.format(self.figfile))

    def parse_main(self):
        try:
            self.parse()
        except FileNotFoundError:
            print('========== Error(ConfigAyband)==========')
            print('file: {} is not found.'.format(self.configfile))
            exit(1)

    def parse(self):
        for line in open(self.configfile, 'r'):
            linedata = line.strip()
            if re.match('^$', linedata):
                continue
            elif re.match('^#', linedata):
                continue

            if '=' in linedata:
                self.set_equal_keys(linedata)
            else:
                if ':' in linedata:
                    self.set_cologne_keys(linedata)
                else:
                    if self.cologne_data_region:
                        self.cologne_data_parse(linedata)

    def check_fort1(self):
        if self.fort1 is None:
            fort1 = ''
            data = self.prefix.split('/')
            data[-1] = 'wk/fort.1'
            for i, v in enumerate(data):
                if i == len(data) - 1:
                    fort1 += v
                else:
                    fort1 += v + '/'
            self.fort1 = fort1

    def check_fort2(self):
        if self.fort2 is None:
            if self.magtype == 'NONM':
                self.fort2 = self.prefix + 'eld.dat'
            elif self.magtype == 'MAGN':
                self.fort2 = self.prefix + 'eld.dat'
            elif self.magtype == 'SPIN':
                if self.spin_orbit:
                    self.fort2 = self.prefix + 'esd.dat'
                else:
                    self.fort2 = self.prefix + 'eld.dat'
        if not os.path.isfile(self.fort2):
            print('========== Error(ConfigAyband) ==========')
            print('from your input, i need datafile. but...')
            print('datafile: {} is not found'.format(self.fort2))
            exit()

    def check_ef(self):
        dstfile = self.prefix + 'dst.dat'
        if self.fermi_energy is None:
            self.fermi_energy = ParseDst(dstfile).fermi_energy
        if self.energy_min is None:
            self.energy_min = round(self.fermi_energy - 0.5, 2)
        if self.energy_max is None:
            self.energy_max = round(self.fermi_energy + 0.5, 2)

    def check_nspin(self):
        if self.magtype == 'NONM':
            self.spin_type = 0
        elif self.magtype == 'SPIN':
            self.spin_type = 0
        else:
            if self.spin_type is None:
                self.spin_type = 3

    def set_equal_keys(self, linedata):
        keyword, value = self.line_to_key_and_val(linedata, '=')
        if value == '':
            return
        if keyword == 'ayband':
            self.ayband = value
        if keyword == 'logfile':
            self.logfile = value
        elif keyword == 'title':
            self.title = value
        elif keyword == 'figfile':
            self.figfile = value
        elif keyword == 'prefix':
            self.prefix = value
        elif keyword == 'spin_orbit':
            self.spin_orbit = self.check_flags(value)
        elif keyword == 'energy_min':
            self.energy_min = float(value)
        elif keyword == 'energy_max':
            self.energy_max = float(value)
        elif keyword == 'xsize':
            self.xsize = float(value)
        elif keyword == 'ysize':
            self.ysize = float(value)
        elif keyword == 'fort.1':
            self.fort1 = value
        elif keyword == 'fort.2':
            self.fort2 = value
        elif keyword == 'ir':
            self.ir = self.check_flags(value)
        elif keyword == 'iopt':
            self.iopt = self.check_flags(value)
        elif keyword == 'char_size':
            self.char_size = int(value)
        elif keyword == 'char_type':
            self.char_type = int(value)
        elif keyword == 'fermi_energy':
            self.fermi_energy = float(value)
        elif keyword == 'spin_type':
            v = value.lower()
            if re.match('^u', v):
                if 'd' in v:
                    self.spin_type = 3
                else:
                    self.spin_type = 2
            elif re.match('^d', v):
                if 'u' in v:
                    self.spin_type = 3
                else:
                    self.spin_type = 1

    def set_cologne_keys(self, linedata):
        title = linedata.split(':')[0]
        try:
            cologne_type, keyword = title.split('_')
        except ValueError:
            print('===== Error(ConfigAyband) =====')
            print('syntax is incorrect in your inputfile.')
            print('inputfile: {}'.format(self.configfile))
            exit()
        if cologne_type.lower() == 'begin':
            if self.cologne_data_region:
                print('===== Error(ConfigAyband) =====')
                print('syntax error:')
                print('inside region:{}'.format(self.cologne_dataname))
                exit()
            else:
                self.cologne_data_region = True
                self.cologne_dataname = keyword.lower()
        elif cologne_type.lower() == 'end':
            if not self.cologne_data_region:
                print('===== Error(ConfigAyband) =====')
                print('syntax error:')
                print('outside any region')
                exit()
            else:
                if keyword.lower() != self.cologne_dataname:
                    print('===== Error(ConfigAyband) =====')
                    print('keyword is inconsistent.')
                    print("begin keyword is `{0}', but end keyword is `{1}'"
                          .format(self.cologne_dataname, keyword.lower()))
                    exit()
                self.cologne_data_region = False

    def cologne_data_parse(self, linedata):
        if self.cologne_dataname == 'axis':
            self.axis_parse(linedata)

    def axis_parse(self, linedata):
        data = linedata.split()
        kp1 = [int(data[0]), int(data[1]), int(data[2]), int(data[3])]
        kp2 = [int(data[4]), int(data[5]), int(data[6]), int(data[7])]
        self.axes.append([kp1, kp2])

    def check_flags(self, value):
        if re.match('^t', value.lower()):
            return True
        elif re.match('^y', value.lower()):
            return True
        else:
            return False

    def line_to_key_and_val(self, linedata, token):
        keyword = linedata.strip().split(token)[0].strip().lower()
        value = linedata.strip().split(token)[1].split('#')[0].strip()
        return [keyword, value]


class ParseSCFInput(object):
    def __init__(self, filename):
        self.filename = filename
        self.parse_main()

    def parse_main(self):
        try:
            self.parse()
        except FileNotFoundError:
            print('========== Error(ParseSCFInput)==========')
            print('file: {} is not found.'.format(self.filename))
            exit(1)

    def parse(self):
        self.magtype = None
        self.kpoint_mesh = []
        kp_flag = False
        for line in open(self.filename):
            linedata = line.strip()
            if self.magtype is None:
                self.magtype = ''
                for i, s in enumerate(list(linedata)):
                    if i > 3:
                        break
                    else:
                        self.magtype += s
            if kp_flag:
                kmesh = linedata.split()
                self.kpoint_mesh = \
                    [int(kmesh[0]), int(kmesh[1]), int(kmesh[2])]
                break
            if 'K POINT' in linedata:
                kp_flag = True


class ParseDst(object):
    def __init__(self, filename):
        self.filename = filename
        self.parse_main()

    def parse_main(self):
        try:
            self.parse()
        except FileNotFoundError:
            print('========== Error(ParseDst)==========')
            print('file: {} is not found.'.format(self.configfile))
            exit(1)

    def parse(self):
        for line in open(self.filename, 'r'):
            linedata = line.strip()
            if 'FERMI-EN=' in linedata:
                self.fermi_energy = float(linedata.split()[1])


class WriteAybandInput(object):
    def __init__(self, config_obj):
        self.config_obj = config_obj
        self.show_config_info()
        self.ayband_input = 'fort.3'
        self.write_fort3()

    def show_config_info(self):
        self.config_obj.show_info()

    def write_fort3(self):
        fout = open(self.ayband_input, 'w')
        if self.config_obj.magtype == 'NONM':
            fout.write("NONMAGNETIC\n")
        elif self.config_obj.magtype == 'MAGN':
            fout.write("MAGNETIC\n")
        elif self.config_obj.magtype == 'SPIN':
            if self.config_obj.spin_orbit:
                fout.write("SPIN-ORBIT\n")
            else:
                fout.write("NONMAGNETIC\n")
        fout.write(" {0} {1} {2:2d}                  NLCOMP NSPIN IFILE\n"
                   .format(self.config_obj.nka,
                           self.config_obj.spin_type,
                           self.config_obj.ifile))
        if self.config_obj.ir:
            jmark = self.config_obj.char_type
        else:
            jmark = 0
        if self.config_obj.iopt:
            iopt = 1
        else:
            iopt = 0
        fout.write(" {0} {1} {2:2d} {3}                JPR JMARK IPOINT IOPT\n"
                   .format(self.config_obj.info_level, jmark,
                           self.config_obj.char_size, iopt))
        fout.write("{0} {1}    {2} {3}      Emin Emax Ym Xm\n"
                   .format(self.config_obj.energy_min,
                           self.config_obj.energy_max,
                           self.config_obj.ysize,
                           self.config_obj.xsize))
        fout.write("{0:2d}           Num of axis\n"
                   .format(len(self.config_obj.axes)))
        for axis in self.config_obj.axes:
            for j in range(2):
                fout.write('  ')
                kx, ky, kz, ic = axis[j]
                fout.write('{0} {1} {2} {3}   '.format(kx, ky, kz, ic))
            fout.write("\n")
        fout.write(" {}  Fermi Energy\n".format(self.config_obj.fermi_energy))
        fout.write(" {}\n".format(self.config_obj.title))
        fout.close()


class CpRmFort12(object):
    def __init__(self, config_obj):
        self.config_obj = config_obj

    def remove(self):
        if self.config_obj.fort1 != 'fort.1':
            if os.path.isfile('fort.1'):
                os.remove('fort.1')
        if self.config_obj.fort2 != 'fort.2':
            if os.path.isfile('fort.2'):
                os.remove('fort.2')

    def copy(self):
        if self.config_obj.fort1 != 'fort.1':
            self.copy_file(self.config_obj.fort1, 'fort.1')
        if self.config_obj.fort2 != 'fort.2':
            self.copy_file(self.config_obj.fort2, 'fort.2')

    def copy_file(self, from_file, to_file):
        if not os.path.isfile(from_file):
            print('========== Error(FileCopy) ==========')
            print('file: {} is not found.'.format(from_file))
            exit()
        else:
            shutil.copy2(from_file, to_file)


class ExecuteAyband(object):
    def __init__(self, config_obj):
        self.config_obj = config_obj
        self.main()

    def main(self):
        print()
        print('  *** execution ayband ***')
        print('    executable:{}'.format(self.config_obj.ayband))
        print('    logfile:{}'.format(self.config_obj.logfile))
        ayband = self.config_obj.ayband + ' > ' + self.config_obj.logfile
        res = subprocess.call(ayband, shell=True)
        if res == 0:
            fortfile = 'fort.' + str(self.config_obj.ifile)
            shutil.copy2(fortfile, self.config_obj.figfile)
            print('    generate figure file:{}'
                  .format(self.config_obj.figfile))
            os.remove(fortfile)
            os.remove('fort.3')
        else:
            print('   error was happen. check inputfile, fort.3 and logfile.')
            exit()


class xAyband(object):
    def __init__(self, configfile):
        self.configfile = configfile
        self.main()

    def main(self):
        self.config_obj = ConfigAyband(self.configfile)
        WriteAybandInput(self.config_obj)
        CpRmFort12(self.config_obj).copy()
        ExecuteAyband(self.config_obj)
        CpRmFort12(self.config_obj).remove()


argv = sys.argv
argc = len(argv)
if argc < 2:
    print('usage: xayband [configure file]')
    exit()
else:
    configfile = argv[1]
    xAyband(configfile)

#!/Volumes/exHD/funa/local/bin/ruby
#
# recover fl? data
#   written by Hiroki Funashima
#
home = ENV['HOME']
$LOAD_PATH.push("#{home}/../funa/opt/tools/module")
require 'RecoverCalc'
if ARGV.empty?
  print "Usage: flcm [index]\n"
  exit
else
  index = ARGV[0]
end

linkfiles = {
  45 => 'fpot',
  32 => 'fchg',
  16 => 'dst',
  28 => 'eld',
  29 => 'esd'
}

tmpfiles = [20, 22, 24, 25, 26, 27, 40, 61, 62]

configure = {
  index: index,
  linkfiles: linkfiles,
  tmpfiles: tmpfiles,
  dir: '..',
  prefix: 'fl',
  suffix: '.dat'
}
RecoverCalc.new(configure)
next_out = '../fl' + (index.to_i + 1).to_s + '.out'
next_in = '../fl' + (index.to_i + 1).to_s + '.dat'
latest_in = '../fl' + index.to_i.to_s + '.dat'
ARGV.shift
if File.exist?(next_out)
  print "\n"
  print "i found next output #{next_out}.\n"
  print "Do you hope to delete #{next_out}? [y/(n)]\n"
  ans = gets
  unless ans.nil?
    if ans.chomp.strip.downcase =~ /^y/
      FileUtils.rm(next_out)
      print " -> #{next_out} has been deleted.\n"
    end
  end
end
if File.exist?(latest_in)
  print "\n"
  print "i found present input #{latest_in}.\n"
  print "Do you hope to copy from #{latest_in} #{next_in}? [y/(n)]\n"
  ans = gets
  unless ans.nil?
    if ans.chomp.strip.downcase =~ /^y/
      FileUtils.cp(latest_in, next_in)
      print " -> #{next_in} has been generated.\n"
    end
  end
end

#!/Volumes/exHD/funa/local/bin/ruby
#
#
#

filename = 'fort.1'

#
# class for check
#
class CheckSign
  def initialize(filename)
    if File.exist?(filename)
      @filename = filename
      @orbital_info = []
      @atom_name = []
      parse_fort1
      @nka = @atom_name.size
    else
      print "==== Error(CheckSign) ====\n"
      print "file:#{filename} is not found.\n"
      exit
    end
    analysis
    display
  end

  def parse_fort1
    linecount = nil
    open(@filename, 'r') do |fin|
      fin.each_line do |linedata|
        next if fin.lineno == 1
        if linedata =~ /^[A-Z,a-z]/
          linecount = 0
          @atom_name.push(linedata.chomp.split[0])
        elsif !linecount.nil?
          linecount += 1
          @orbital_info.push(line2orbital(linedata)) if linecount == 1
          if linecount == 2 && linedata !~ /D/
            line2orbital(linedata).each { |x| @orbital_info[-1].push(x) }
          end
        end
      end
    end
  end

  def line2orbital(line)
    line.chomp.strip.split.map(&:to_i)
  end

  def parse_orbital_symbol(data)
    n = data / 100
    l = data / 10 % 10
    elec =
      if data % 10 > 0
        :valence
      else
        :core
      end
    [n, l, elec]
  end

  def analysis
    @electrons = []
    1.upto(@nka) do |ika|
      @electrons[ika - 1] = []
      @orbital_info[ika - 1].each do |orbital|
        n, l, elec = parse_orbital_symbol(orbital)
        @electrons[ika - 1][l] = [] if @electrons[ika - 1][l].nil?
        @electrons[ika - 1][l].push(n: n, state: elec)
      end
    end
  end

  def display
    lname = %w(s p d f)
    1.upto(@nka) do |ika|
      print "for #{@atom_name[ika - 1]}:\n"
      0.upto(3) do |l|
        orbitals = @electrons[ika - 1][l]
        next if orbitals.nil?
        print "  l=#{l} ("
        orbitals.each do |orbital|
          if orbital[:state] == :valence
            n = orbital[:n]
            print "#{n}#{lname[l]}:#{parity(n, l)} "
          end
        end
        print ")\n"
      end
      print "--------------------\n"
    end
  end

  def parity(n, l)
     if n.even?
       if l.even?
         :+
       else
         :-
       end
     else
       if l.even?
         :-
       else
         :+
       end
     end
  end
end

CheckSign.new(filename)

#!/Volumes/exHD/funa/local/bin/ruby
#
#
require 'time'
def sec2time(sec)
  day = (sec / 86400).to_i
  hour = ((sec - ( day * 86400 )) /  3600 ).to_i
  min = ((sec - day * 86400 - 3600 * hour ) / 60 ).to_i
  second = sec - day * 86400 - 3600 * hour - 60 * min
  second = sprintf('%.3f', second)
  my_time = ''
  my_time << "#{day}day " if day > 0
  my_time << "#{hour}hour " if hour > 0
  my_time << "#{min}min " if min > 0
  my_time << "#{second}sec" 
  my_time
end

def count_iteration(filename)
  iter_line = -2
  iter_check = false
  open(filename,'r').each do |fin|
    fin.each_line do |linedata|
      if linedata =~ /ITERATION\s+DATA/
        iter_check = true
      end
      if iter_check
        if iter_line > -1
          mix, pmix, amix = linedata.chomp.split.map(&:to_f)
          iter_check = false if pmix < 0.0
        end
        iter_line += 1 if iter_check
      end
    end
  end
  iter_line
end


print "-------------------------------------------------\n" 
print "cpu times: #{ENV['PWD']}\n\n"
total_cpu_time = 0.0
`ls *.log`.split("\n").each do |filename|
  cpu_time = 0.0
  open(filename, 'r').each do |fin|
    fin.each_line do |line|
      if line =~ /done/ && line =~ /sec/
        cpu_time = line.split(':')[1].split('sec')[0].to_f
      end
    end
  end
  print format('for %10s ... cpu time = %10.3f sec', filename, cpu_time)
  print " (#{sec2time(cpu_time)})" if cpu_time > 60.0
  inputfile = '../' + filename.split('.log')[0] + '.dat'
  print ".\n"
  if File.exist?(inputfile)
    niter = count_iteration(inputfile)
    print "                            ->   "
    print format(' %.3f sec/iteration', cpu_time / niter)
    print " (#{sec2time(cpu_time / niter )})" if cpu_time / niter > 60.0
  end
  print ".\n"
  total_cpu_time += cpu_time
end
print "\n"
print format('total cpu time: ... %.3f sec', total_cpu_time)
print " (#{sec2time(total_cpu_time)}).\n"
print "-------------------------------------------------\n" 
